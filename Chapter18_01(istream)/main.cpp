#include<iostream>
#include<iomanip>
#include<string>
using namespace std; 

/*

<istream으로 입력받기>

데이터의 입력 방식은 파일 입출력 방식에서도 동일하게 적용되므로,
잘 숙지해두면 file stream을 할 때 유용하게 사용 가능 

*/

int main()
{
	// 입력 시 엔터, 스페이스 등의 공백문자를 통해 입력될 데이터를 분리/구분 

	//cout << "Enter a number" << endl; 

	//int i;
	//cin >> i; 

	//cout << i << endl; 

	// istream은 버퍼에 임시적으로 데이터를 저장해두고 꺼내오는 방식

	// cin으로 buf가 저장되었으므로, buf의 사이즈만큼 입력 가능 
	// (buf의 사이즈를 넘어가는 데이터 입력 시 오버플로우로 런타임 에러 발생)
	char buf[5];

	//cin >> buf; 

	// setw(n) : 입력되는 데이터 길이를 제한하여, 입력 가능한 데이터 범위를 넘어가도
	// 자동으로 입력 데이터를 잘라서 사용하기 때문에 오류 방지 가능 

	// 단, 입력받고 남은 데이터는 여전히 버퍼에 저장되어 있어, 
	// 다시 입력을 받는 경우 버퍼에 남아있는 데이터를 자동으로 입력받게 된다. 
	//cin >> setw(5) >> buf;
	//cout << buf << endl; 

	//cin >> setw(5) >> buf;
	//cout << buf << endl;

	//cin.get(buf, 5);		// 입력 데이터의 크기를 5만큼 제한 
	//cout << buf << endl; 

	//cin.getline(buf, 5);	// 데이터를 라인(행) 단위로 받아서, 10크기 만큼 입력
	//cout << buf << endl; 
	//cout << cin.gcount() << " " << buf << endl;	// 입력된 데이터의 크기를 반환 

	/*
	
	<get, getline의 차이>

	둘 다 공백문자를 포함하여 출력하는 함수 
	
	cin.gcount(); 를 통해 입력된 데이터의 크기 반환 시, 
	getline() 함수의 경우 줄바꿈 char 까지 함께 카운트하여 실제 데이터 크기 + 1 반환 
	get() 함수는 실제 데이터 크기 그대로 반환 

	*/

	//=======================================================================//

	// char 데이터를 한 글자씩 입력 받기 

	char ch;

	// 단, 아래와 같이 입력받는 경우 공백문자가 적용되지 않음. 
	// ex) Hello World -> HelloWorld
	//while (cin >> ch)
	//{
	//	cout << ch; 
	//}

	// 아래와 같이 입력받는 경우 공백문자도 제대로 적용된다. 
	// 버퍼에 입력 시에도 같은 방법으로 입력 가능 
	//while (cin.get(ch))
	//{
	//	cout << ch;
	//}

	//=======================================================================//

	// string 데이터 입력받기 

	string str; 

	// string 형 데이터는 데이터 크기를 미리 지정하는 데이터가 아니므로, 
	// 아래와 같은 방식으로 데이터를 입력 받는다. 
	//getline(cin, str);

	// 단, 위와 같은 방식으로 입력받을 경우 cin 함수를 사용한 것이 아니므로
	// cin.gcount() 의 값이 카운트되지 않는다. (0 출력)
	//cout << cin.gcount() << " " << str << endl; 

	//=======================================================================//

	char buff[1024];

	// 입력되는 데이터를 무시하는 함수 
	//cin.ignore();		// 입력되는 데이터 중 1개의 char 무시 
	//cin.ignore(3);	// 입력되는 데이터 중 3개의 char 무시 

	// 버퍼에 저장된 데이터 중 가장 먼저 입력될 데이터를 보는 기능 
	// 데이터를 보기만 하고 버퍼에서 사용하지는 않는다. 
	//cout << (char)cin.peek() << endl; 

	cin >> buff;
	cout << buff << endl;

	// 이미 입력된 char를 버퍼에 다시 담는 기능 
	// 버퍼에 가장 마지막으로 저장되어 있던 char 하나를 버퍼에 다시 가져온다. 
	cin.unget();	

	// 버퍼에 괄호 내의 char를 집어넣는 기능 
	// 버퍼의 맨 앞에 집어넣어서 입력 시 가장 앞에 위치 
	cin.putback('A');	

	cin >> buff;
	cout << buff << endl;


	return 0;
}