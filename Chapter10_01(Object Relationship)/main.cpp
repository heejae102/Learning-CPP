#include<iostream>
using namespace std;

/*

<객체들의 관계>

객체지향적인 프로그래밍으로 프로그램을 만들 때,
프로그램 내에서 객체들이 서로 어떠한 방식으로
상호작용 할지에 대한 설계가 이루어져야 한다.

이러한 설계 내지는 클래스간의 상호 관계성은
일정한 패턴을 보이게 되는데, 이는 다음과 같다.


					관계 표현동사							예시
구성(요소)
Composition			   Part-of					두뇌는 육체의 일부이다.

집합
Aggregation				Has-a				어떤 사람이 자동차를 가지고 있다.

연계, 제휴									  환자는 의사의 치료를 받는다.
Association				Uses-a			   의사는 환자들로부터 치료비를 받는다.

의존
Dependency			  Depends-on	  나는(다리가 부러져서) 한 달 동안 목발을 짚었다.


//----------------------------------------------------------------------------------------------------//


구성(요소)			관계 형태			다른 클래스에 속할 수 있는가?		멤버의 존재를 클래스가 관리?			방향성

Composition			전체/부품						No								Yes						단방향

집합
Aggregation			전체/부품						Yes								No						단방향

연계, 제휴
Association		  용도 외엔 무관						Yes								No					단방향 vs 양방향

의존
Depencency		  용도 외엔 무관						Yes								Yes						단방향


- 구성요소는 가장 밀접한 관계. 두뇌는 육체가 없으면 존재할 수 없으며, 육체는 두뇌를 관리할 의무가 있다.
- 집합은 구성요소보다 느슨한 관계.
- 구성요소에서 육체가 사라지면 두뇌는 함께 사라진다.
- 반면 집합에서는 사람의 자동차 소유권이 사라져도, 자동차는 여전히 존재한다.
- 연계, 제휴는 더 느슨한 관계. 한 환자가 한 의사만 만나는 것은 아니고, 한 의사가 한 환자만 만나는 것도 아니다.
- 연계, 제휴보다 더 느슨한 것이 의존 관계. 의존성이 사라지면 해당 객체와의 관계가 유지되지 않을 수 있기 때문.

*/

int main()
{
	return 0;
}