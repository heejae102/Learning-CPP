#include<iostream>
using namespace std; 

/*

<스택과 힙>

프로그램을 컴퓨터가 실행할 때 운영체제는 프로그램을 운영 할 메모리를 넘겨준다. 
메모리는 각각의 세그먼트로 나뉘어져 있는데 세그먼트마다의 역할이 다르다.

코드 영역 : 코드 세그먼트에는 작성한 프로그램이 저장된다. 

데이터 영역 : initialized data segment와 uninitialized data segment 두 종류로 나뉜다.
uninitialized data segment에는 0으로 초기화된 전역변수 혹은 static 변수가 저장되고
initialized data segment에는 값이 초기화된 전역변수 혹은 static 변수가 저장된다. 

스택 영역 : 프로그램을 실행하면서 데이터를 차곡차곡 쌓고 사용된 데이터는 FILO 구조로
차례차례 해제한다. 회전초밥집에서 접시를 쌓고 치우는 방식과 유사. 
스택은 비교적 빠른 속도로 사용 가능하지만, 데이터 영역의 사이즈가 작다. 
스택 영역에 공간이 모자라서 데이터가 넘치는 상황을 '스택 오버플로우'라고 부른다. 

힙 영역 : 동적할당되는 메모리를 저장하는 공간으로 스택 영역보다 비교적 공간이 크다. 
하지만 스택 영역은 힙 영역에 비해 할당될 메모리의 위치를 파악 가능한 반면
힙 영역은 할당되는 메모리의 위치를 파악하기 어렵다는 단점이 있다. 

*/

int main()
{
	//메모리 관련 사례1

	int *ptr = nullptr; 
	ptr = new int[10000];

	//delete 키워드로 ptr이 가리키는 주소의 메모리는 해제
	//하지만 ptr은 여전히 남아서 해당 주소를 가리키는 상태이다. 
	delete[] ptr; 
	
	//따라서 이대로 프로그램을 종료하지 않을 경우 ptr을 NULL값으로 초기화하는 것이 좋다. 
	ptr = nullptr; 


	//----------------------------------------------------------------------//

	// 메모리 관련 사례2 - 메모리 누수 

	//메모리를 할당받은 채로 해제하지 않을 경우 
	//힙 영역에 메모리는 할당된 채 해당 메모리는 사용하지 않은 채로 
	//방치되는 상황이 발생하고, 이와 같이 상황이 반복될 경우 
	//사용하지 않는 메모리 공간이 계속 방치되어 정작 메모리가 정말 필요할 경우
	//메모리 공간이 부족한 상황이 발생할 수 있다. 

	return 0;
}